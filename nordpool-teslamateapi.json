[
    {
        "id": "315d44a248a1f9b8",
        "type": "tab",
        "label": "Charge timing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa4ef0e78c8a706e",
        "type": "inject",
        "z": "315d44a248a1f9b8",
        "name": "Trigger at 22:55",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "55 22 * * *",
        "once": false,
        "onceDelay": "1",
        "topic": "timestamp",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "9b37315731f16d91"
            ]
        ]
    },
    {
        "id": "0cc902f1d835be41",
        "type": "function",
        "z": "315d44a248a1f9b8",
        "name": "Calculate charge start based on Nordpool prices",
        "func": "// Charging should be ready by this full hour, like 7:00 (24h, i.e. 7AM)\n// Array starting from Sunday. Example: ready by 07:00 on Mon-Fri, 08:00 on Sat-Sun\nconst chargeReadyHour = [ 8, 7, 7, 7, 7, 7, 8 ]\n\n// Caruna grid fee + electricity tax + Vaasan Sähkö spot commission, €/kWh\nconst basePrice =  0.0323 + 0.02827515 + 0.0041\n\n// 3-phase charge\nconst chargePhases = 3\n\n// How many percentage points of charge the car gains in one hour\nconst chargeSpeeds = [\n    {\n        amps: 10,\n        chargePercentagePointsPerHour: 9,\n        efficiency: 0.92\n    },\n    {\n        amps: 16,\n        chargePercentagePointsPerHour: 14,\n        efficiency: 0.85\n    }\n]\n\n// How many percentage points the charge rate drops below 0°C, per each °\nconst chargePercentagePointsPerHourColdFactor = 0.07\n\n// On which hour to start charging if anything fails\nconst fallbackChargeStartHour = 23\n\ntry {\n    // 'Car Dashboards' saves the topics into global context in format [value, timestamp]\n    const battery_level = global.get(\"battery_level\")[0]\n    const charging_state = global.get(\"charging_state\")[0]\n    const charge_limit_soc = global.get(\"charge_limit_soc\")[0]\n    const outside_temp = global.get(\"outside_temp\")[0]\n    const scheduled_charging_start_time = global.get(\"scheduled_charging_start_time\")[0]\n\n    node.warn(`Battery ${battery_level}%, charge limit: ${charge_limit_soc}%`)\n    node.warn(`Charging state: ${charging_state}, outside temperature: ${outside_temp}`)\n    node.warn(`Charge scheduled at: ${scheduled_charging_start_time || \"-\"}`)\n\n    if (scheduled_charging_start_time == \"\" || charging_state != \"Stopped\") {\n        node.status({ text: `Not plugged in with scheduled charge: ${charging_state || \"-\"}` })\n        return null\n    }\n\n    const chargeHourAlternatives = chargeSpeeds.map( obj => (\n        {...obj,\n            hours: (charge_limit_soc - battery_level) / (obj.chargePercentagePointsPerHour + chargePercentagePointsPerHourColdFactor * (outside_temp < 0 ? outside_temp : 0))\n        }))\n\n    const nordpoolPrices = Enumerable.from(msg.payload.map(pricePoint => (\n        {\n            date: new Date(pricePoint.DateTime),\n            value: pricePoint.PriceWithTax\n        }\n    )))\n\n    // Charge window start is the next full hour\n    let chargeStartTime = new Date()\n    chargeStartTime.setHours(chargeStartTime.getHours() + 1)\n    chargeStartTime.setMinutes(0, 0, 0)\n\n    // Charge window end\n    let chargeEndTime = new Date()\n    if (chargeStartTime.getHours() >= chargeReadyHour[chargeStartTime.getDay()]) {\n        chargeEndTime.setDate(chargeEndTime.getDate() + 1)\n    }\n    chargeEndTime.setHours(chargeReadyHour[chargeEndTime.getDay()], 0, 0, 0)\n\n    const pricesDuringChargeWindow = nordpoolPrices.where(\n        i => new Date(i.date).getTime() >= chargeStartTime.getTime()\n            && new Date(i.date).getTime() <= chargeEndTime.getTime()\n    )\n\n    const cheapestStartHourAlternatives = chargeHourAlternatives.map( chargeHourAlternative => {\n        const hoursToConsider = pricesDuringChargeWindow.take(pricesDuringChargeWindow.count() - Math.ceil(chargeHourAlternative.hours)).toArray()\n\n        const cheapestStartHour = Enumerable.from(hoursToConsider.map(\n            (price, index) => (\n                {\n                    date: price.date,\n                    price: pricesDuringChargeWindow.skip(index).take(Math.ceil(chargeHourAlternative.hours)).sum(i => (basePrice + i.value) / chargeHourAlternative.efficiency * (230 * chargeHourAlternative.amps * chargePhases / 1000))\n                })\n        )).orderBy(i => i.price).first()\n\n        const startHour = new Date(cheapestStartHour.date).getHours()\n\n        return {\n            startTime: cheapestStartHour.date,\n            startHour: startHour,\n            chargeHours: chargeHourAlternative.hours.toFixed(1),\n            amps: chargeHourAlternative.amps,\n            price: cheapestStartHour.price\n        }\n    })\n\n    const cheapestStartHour = Enumerable.from(cheapestStartHourAlternatives).orderBy(i => i.price).first()\n\n    const startTime = cheapestStartHour.startTime\n    const startHour = cheapestStartHour.startHour\n    const startDelay = startTime.getTime() - new Date().getTime() - 60 * 1000\n    const chargeAmps = cheapestStartHour.amps\n    const price = cheapestStartHour.price.toFixed(2)\n\n    node.status({ text: `Charge at: ${startHour.toString().padStart(2, '0')}:00 for ${cheapestStartHour.chargeHours} hours at ${chargeAmps}A, estimate ${price}€` })\n\n    return [\n        {\n            \"delay\": startDelay.toString()\n        },\n        {\n            \"payload\": {\n                \"time\": startHour * 60,\n                \"enable\": \"true\"\n            }\n        },\n        {\n            \"payload\": {\n                \"charging_amps\": chargeAmps\n            }\n        }\n    ]\n} catch (e) {\n    node.warn(`Exception: ${e}`)\n    node.status({ text: `Failure, charge at ${fallbackChargeStartHour}:00` })\n\n    // defaults:\n    // * 4 minutes delay -> 22:59 if this executes at 22:55\n    // * 23:00 charge start time\n    // * 10A charging amps\n    return [\n        {\n            \"delay\": (4 * 60 * 1000).toString()\n        },\n        {\n            \"payload\": {\n                \"time\": fallbackChargeStartHour * 60,\n                \"enable\": \"true\"\n            }\n        },\n        {\n            \"payload\": {\n                \"charging_amps\": 10\n            }\n        }\n    ]\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Enumerable",
                "module": "linq-js"
            }
        ],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "6fdc375d860e060e"
            ],
            [
                "1682b39c452f558b",
                "168677ceeae479e3"
            ],
            [
                "82b65f89e9dad8ec",
                "8a5ef6158f8957a6"
            ]
        ]
    },
    {
        "id": "6fdc375d860e060e",
        "type": "delay",
        "z": "315d44a248a1f9b8",
        "name": "Logging start delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "bbeed93578f5099c"
            ]
        ]
    },
    {
        "id": "bbeed93578f5099c",
        "type": "http request",
        "z": "315d44a248a1f9b8",
        "name": "Resume logging",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://teslamate:4000/api/car/1/logging/resume",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 160,
        "wires": [
            [
                "f5a2bcb47d483676"
            ]
        ]
    },
    {
        "id": "19c5c962102a6e62",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.topic & \" = \" & msg.payload",
        "statusType": "jsonata",
        "x": 790,
        "y": 220,
        "wires": []
    },
    {
        "id": "1682b39c452f558b",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.topic & \" = \" & msg.payload",
        "statusType": "jsonata",
        "x": 570,
        "y": 280,
        "wires": []
    },
    {
        "id": "f5a2bcb47d483676",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "delay",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.delay",
        "statusType": "jsonata",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "9b37315731f16d91",
        "type": "http request",
        "z": "315d44a248a1f9b8",
        "name": "spot-hinta.fi TodayAndDayForward FI",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.spot-hinta.fi/TodayAndDayForward?region=FI",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "0cc902f1d835be41"
            ]
        ]
    },
    {
        "id": "df7648182c2e8310",
        "type": "inject",
        "z": "315d44a248a1f9b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 100,
        "wires": [
            [
                "bbeed93578f5099c"
            ]
        ]
    },
    {
        "id": "168677ceeae479e3",
        "type": "http request",
        "z": "315d44a248a1f9b8",
        "name": "Schedule charge",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://teslamateapi:8080/api/v1/cars/1/command/set_scheduled_charging",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "19c5c962102a6e62"
            ]
        ]
    },
    {
        "id": "82b65f89e9dad8ec",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.topic & \" = \" & msg.payload",
        "statusType": "jsonata",
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "8a5ef6158f8957a6",
        "type": "http request",
        "z": "315d44a248a1f9b8",
        "name": "Set charging amps",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://teslamateapi:8080/api/v1/cars/1/command/set_charging_amps",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "4aee6983c6289605"
            ]
        ]
    },
    {
        "id": "4aee6983c6289605",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.topic & \" = \" & msg.payload",
        "statusType": "jsonata",
        "x": 790,
        "y": 340,
        "wires": []
    }
]