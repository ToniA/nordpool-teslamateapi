[
    {
        "id": "315d44a248a1f9b8",
        "type": "tab",
        "label": "Charge timing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa4ef0e78c8a706e",
        "type": "inject",
        "z": "315d44a248a1f9b8",
        "name": "Trigger at 22:55",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "55 22 * * *",
        "once": false,
        "onceDelay": "1",
        "topic": "timestamp",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "0cc902f1d835be41"
            ]
        ]
    },
    {
        "id": "0cc902f1d835be41",
        "type": "function",
        "z": "315d44a248a1f9b8",
        "name": "Calculate charge start based on Nordpool prices",
        "func": "// Charge start window is the next full hour, for chargeWindowLength hours\nconst chargeWindowLength = 8\n\n// How many percentage points of charge the car gains in one hour\nconst chargePercentagePointsPerHour = 9\n\n// How many percentage points the charge rate drops below 0째C, per each 째\nconst chargePercentagePointsPerHourColdFactor = 0.7\n\n// Nordpool market area\nconst nordpoolArea = \"FI\"\n\n// Name of the 'home' geolocation\nconst homeGeolocationName = \"Koti\"\n\ntry {\n    const nordpool = new Nordpool.Prices()\n\n    // 'Car Dashboards' saves the topics into global context in format [value, timestamp]\n    const geofence = global.get(\"geofence\")[0]\n    const battery_level = global.get(\"battery_level\")[0]\n    const charging_state = global.get(\"charging_state\")[0]\n    const charge_limit_soc = global.get(\"charge_limit_soc\")[0]\n    const outside_temp = global.get(\"outside_temp\")[0]\n\n    if (geofence != homeGeolocationName || charging_state != \"Stopped\") {\n        node.status({ text: `Not plugged in at home: ${geofence || \"-\"}/${charging_state || \"-\"}` })\n        return null\n    }\n\n    // Charge speed:\n    // * ~9% per hour, a bit slower in cold weather\n    // * ~8.3% per hour at -10째C\n    // * ~7.6% per hour at -20째C\n    const percentPerHour = chargePercentagePointsPerHour + 0.7 * (outside_temp < 0 ? outside_temp : 0)\n    const chargeHours = Math.ceil((charge_limit_soc - battery_level) / percentPerHour)\n\n    let tomorrow = new Date()\n    tomorrow.setDate(tomorrow.getDate() + 1)\n    tomorrow.setHours(0, 0, 0)\n\n    node.status({ text: \"Fetching Nordpool prices\" })\n\n    const todayPrices = await nordpool.hourly({ area: nordpoolArea })\n    const tomorrowPrices = await nordpool.hourly({ area: nordpoolArea, from: tomorrow })\n    const nordpoolPrices = Enumerable.from(todayPrices.concat(tomorrowPrices))\n\n    node.status({ text: \"Nordpool prices fetched\" })\n\n    // Charge start window is the next full hour\n    let chargeStartTime = new Date()\n    chargeStartTime.setHours(chargeStartTime.getHours() + 1)\n    chargeStartTime.setMinutes(0, 0, 0)\n\n    const pricesSinceElevenPM = nordpoolPrices.where(\n        i => new Date(i.date).getTime() >= chargeStartTime.getTime()\n    ).take(chargeWindowLength)\n    const hoursToConsider = pricesSinceElevenPM.take(pricesSinceElevenPM.count() - chargeHours)\n    let startHourPrices = []\n\n    hoursToConsider.toArray().forEach(\n        (price, index) =>\n            startHourPrices.push({ date: price.date, price: pricesSinceElevenPM.skip(index).take(chargeHours).sum(i => i.value) })\n    )\n\n    const cheapestStartHours = Enumerable.from(startHourPrices).orderBy(i => i.price)\n    const startTime = new Date(cheapestStartHours.first().date)\n    const startHour = new Date(cheapestStartHours.first().date).getHours()\n    const startDelay = startTime.getTime() - new Date().getTime() - 60 * 1000\n    node.status({ text: `Charge at: ${startHour.toString().padStart(2, '0')}:00 for ${chargeHours} hours` })\n\n    return [\n        {\n            \"delay\": startDelay.toString()\n        },\n        {\n            \"payload\": {\n                \"time\": startHour * 60,\n                \"enable\": \"true\"\n            }\n        }\n    ]\n} catch (e) {\n    node.warn(`Exception: ${e}`)\n\n    // defaults:\n    // * 4 minutes delay -> 22:59 if this executes at 22:55\n    // * 23:00 charge start time\n    return [\n        {\n            \"delay\": (4 * 60 * 1000).toString()\n        },\n        {\n            \"payload\": {\n                \"time\": 23 * 60,\n                \"enable\": \"true\"\n            }\n        }\n    ]\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Enumerable",
                "module": "linq-js"
            },
            {
                "var": "Nordpool",
                "module": "nordpool"
            }
        ],
        "x": 480,
        "y": 80,
        "wires": [
            [
                "6fdc375d860e060e"
            ],
            [
                "1682b39c452f558b",
                "168677ceeae479e3"
            ]
        ]
    },
    {
        "id": "6fdc375d860e060e",
        "type": "delay",
        "z": "315d44a248a1f9b8",
        "name": "Logging start delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 810,
        "y": 80,
        "wires": [
            [
                "bbeed93578f5099c"
            ]
        ]
    },
    {
        "id": "bbeed93578f5099c",
        "type": "http request",
        "z": "315d44a248a1f9b8",
        "name": "Resume logging",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://teslamate:4000/api/car/1/logging/resume",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1020,
        "y": 80,
        "wires": [
            [
                "f5a2bcb47d483676"
            ]
        ]
    },
    {
        "id": "168677ceeae479e3",
        "type": "http request",
        "z": "315d44a248a1f9b8",
        "name": "Schedule charge",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://teslamateapi:8080/api/v1/cars/1/command/set_scheduled_charging",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 810,
        "y": 140,
        "wires": [
            [
                "19c5c962102a6e62"
            ]
        ]
    },
    {
        "id": "19c5c962102a6e62",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.topic & \" = \" & msg.payload",
        "statusType": "jsonata",
        "x": 1010,
        "y": 140,
        "wires": []
    },
    {
        "id": "1682b39c452f558b",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.topic & \" = \" & msg.payload",
        "statusType": "jsonata",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "f5a2bcb47d483676",
        "type": "debug",
        "z": "315d44a248a1f9b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "delay",
        "targetType": "msg",
        "statusVal": "$moment().tz('Europe/Helsinki').format('HH:mm:ss') & \": \" & msg.delay",
        "statusType": "jsonata",
        "x": 1210,
        "y": 80,
        "wires": []
    }
]